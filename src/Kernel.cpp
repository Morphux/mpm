/*
 * Kernel.cpp
 * By: Louis Solofrizzo <louis@ne02ptzero.me>
 * 2015-13-12 23:38
 */

#include "Kernel.hpp"

Kernel::Kernel(void) {
	std::stringstream 	buffer;
	std::ifstream		fd;
	struct utsname		s_uname;

	uname(&s_uname);
	fd.open("/usr/src/linux-" + std::string(s_uname.release) + "/.config");
	if (!fd.is_open())
		Error::error("The Kernel configuration file can not be found");
	buffer << fd.rdbuf();
	this->_readConfig(buffer.str());
}

Kernel::~Kernel(void) {
	return ;
}

void	Kernel::_readConfig(std::string s) {
	std::list<std::string>				lst = split(s, '\n'), line;
	std::list<std::string>::iterator	it;
	t_kern								*tmp;
	std::vector<std::string>			vLine;

	for (it = lst.begin(); it != lst.end(); it++) {
		if ((*it).length() > 1) {
			line = split(*it, '=');
			vLine = { std::begin(line), std::end(line) };
			tmp = new t_kern();
			if (vLine.size() == 2) {
				tmp->name = vLine[0];
				tmp->value = vLine[1];
				tmp->isComment = 0;
				this->_config.push_back(tmp);
			} else if (vLine.size() == 1) {
				line = split(*it, ' ');
				vLine = { std::begin(line), std::end(line) };
				if (vLine.size() > 1 && vLine[1].substr(0, 6) == "CONFIG") {
					tmp->name = vLine[1];
					tmp->value = "";
					tmp->isComment = 1;
					this->_config.push_back(tmp);
				}
			}
		}
	}
}

void	Kernel::setConfig(std::string name, std::string value) {
	std::list<t_kern *>::iterator		it;

	for (it = this->_config.begin(); it != this->_config.end(); it++) {
		if ((*it)->name == name) {
			if ((*it)->value != value) {
				(*it)->value = value;
				if (value == "")
					(*it)->isComment = 1;
				else
					(*it)->isComment = 0;
				Kernel::recompile = 1;
			}
		}
	}
}

void	Kernel::make(void) {
	std::ofstream		fd;
	struct utsname		s_uname;
	time_t				tm =time(NULL);
	struct tm 			*curtime = localtime (&tm);
	Exec				*e = new Exec();
	std::list<t_kern *>::iterator	it;

	uname(&s_uname);
	fd.open("/usr/src/linux-" + std::string(s_uname.release) + "/.config", std::fstream::trunc);
	fd << "# Linux Kernel " << std::string(s_uname.release) << " config file" << std::endl;
	fd << "# Generated by Morphux Package Manager" << std::endl;
	fd << "# Date: " << asctime(curtime);
	fd << "# DO NOT EDIT" << std::endl << std::endl;
	for (it = this->_config.begin(); it != this->_config.end(); it++) {
		if ((*it)->isComment == 1) {
			fd << "# " << (*it)->name << " is not set" << std::endl;
		} else {
			fd << (*it)->name << "=" << (*it)->value << std::endl;
		}
	}
	chdir(std::string("/usr/src/linux-" + std::string(s_uname.release)).c_str());
	Error::info("Compiling Kernel");
	e->execute({"make"});
	Error::info("Modules installation");
	e->execute({"make", "modules_install"});
	Error::info("Installation");
	e->execute({"cp", "-v", "arch/" + Options::config["arch"].asString() + "/boot/bzImage",
		"/boot/vmlinuz-" + std::string(s_uname.release) + "-morphux"});
	e->execute({"cp", "-v", ".config",
		"/boot/Config-" + std::string(s_uname.release)});
	e->execute({"cp", "-v", "System.map",
		"/boot/System-map-" + std::string(s_uname.release)});
}

void	Kernel::install(void) {
	int		res;
	Exec	*e = new Exec();

	res = Error::input("Kernel has been recompiled. Reboot now ? [Yes/no] ");
	for (res = 0; res != 'y' && res != 'n' && res != 'Y' && res != 10; ) {
		Error::warning("Please type Yes, no or enter.");
		res = Error::input("Kernel has been recompiled. Reboot now ? [Yes/no] ");
	}
	if (res == 'y' || res == 'Y' || res == 10)
		e->execute({"reboot"});
}

int		Kernel::recompile = 0;
